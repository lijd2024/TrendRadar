name: Hot News Crawler

on:
  schedule:
    - cron: "0 * * * *" # 每小时整点运行一次
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 方案：在一次 workflow 中对多个分支并行执行任务（schedule 仍然由默认分支触发，
  # 但 job 会 checkout 并在指定分支上运行/提交），可以在 matrix 中列出需要的分支。
  crawl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [master, jade] # <- 在这里添加或删除你想要运行的分支名
    steps:
      - name: Checkout repository (target branch: ${{ matrix.branch }})
        uses: actions/checkout@v3
        with:
          ref: ${{ matrix.branch }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify required files
        run: |
          echo "🔍 检查必需的配置文件..."

          if [ ! -f config/config.yaml ]; then
            echo "❌ 错误: config/config.yaml 文件不存在"
            echo "请参考项目文档创建配置文件"
            exit 1
          fi

          if [ ! -f config/frequency_words.txt ]; then
            echo "❌ 错误: config/frequency_words.txt 文件不存在"
            echo "请参考项目文档创建频率词配置文件"
            exit 1
          fi

          echo "✅ 配置文件检查通过"

      - name: Run crawler on branch
        env:
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DINGTALK_WEBHOOK_URL: ${{ secrets.DINGTALK_WEBHOOK_URL }}
          WEWORK_WEBHOOK_URL: ${{ secrets.WEWORK_WEBHOOK_URL }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER }}
          EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT }}
          NTFY_TOPIC: ${{ secrets.NTFY_TOPIC }}
          NTFY_SERVER_URL: ${{ secrets.NTFY_SERVER_URL }}
          NTFY_TOKEN: ${{ secrets.NTFY_TOKEN }}
          GITHUB_ACTIONS: true
        run: python main.py

      - name: Commit and push if changes back to target branch
        run: |
          TARGET_BRANCH="${{ matrix.branch }}"

          # 配置 committer
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # 确保当前 HEAD 对应目标分支，再进行提交并推送回去
          # actions/checkout 已经 checkout 了目标分支的最新 commit
          git add -A
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit on ${TARGET_BRANCH}"
          else
            git commit -m "Auto update by GitHub Actions on ${TARGET_BRANCH} at $(TZ=Asia/Shanghai date)"
            # 推送到远端同名分支
            git push origin HEAD:${TARGET_BRANCH}
          fi
